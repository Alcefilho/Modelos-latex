%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: HA-prospser-exemplo.dvi
%%CreationDate: Tue Sep 20 14:10:35 2016
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusSanL-Regu NimbusSanL-Bold NimbusSanL-BoldItal
%%+ Dingbats
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o HA-prospser-exemplo.ps
%+ HA-prospser-exemplo.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.09.20:1410
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-ovl.pro 0 0
% $Id: pst-ovl.pro 859 2013-12-21 16:51:58Z herbert $
%
%% PostScript prologue for pst-ovl.tex.
%% Version 0.04, 2014/05/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/tx@ovlDict 10 dict def 
tx@ovlDict begin
%
/BeginOL { 
  dup -1 eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%
% END pst-ovl.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 110 /a73 put
dup 117 /a78 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B023877B96EA2AE6E5E42682E9F4BABD109F039E3
CDCC6B0F9404DA157F91B61905B34C39BD0543872FEBA04FADF1DD613E1E9822
560851385E512B3754A099D21B332D2C9547EEE2B94EBC03B2D954DE0D64D28B
5C0305C968BF1EA14529BE16F9E7F147B08D71B9332ABB7B5EF1B8B60A8D19F5
22B497164EA1A20E17E9B45FE8BB95E205F459A9C71796F7532065689D8E3BEA
2C5D283D8DB2B6FEAC584308DACE9D75B727D36629EF9D6C6CD83764F69737E1
E5DDEAA133E2B85DAA208087B5986EE1CCC33F1B16293CE43AE49B355D946BD4
33C7A09634EB055D6AFC63174E369D06102129B8C73D9F4F2BFB455E4051E48D
D085AB8942B093900F05F22D56FB7A2A95F4A1BC0516A0158C72012718862386
2CD1A9B0CD34ABE24C32AD9B06E3A069FB9E04972294F57A327C5FD9B9211AF6
2756DCF94140A79AB578C6BDCAF8AF61486056CFC70C2F3053EEF5DAAABBA009
738262C6EB3F7575F9BE9DDED7808203525B255651F8D4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB391F7C7
C03F47494A607BAF90BBFE31BE2A5E1FBDB07D5BCEE30EC3FE52FF996A595DB1
2AECFA9F05D26DCBE562B2A1AA7A2EB7727816C25E40F84CD33FAD87D5051181
315AEF884EABB76C5B134E7E0185E7D59A2DA456CEDC82C054F197229990E895
ABB45C025940C558D4C98C6764B00D6917766CABAAEE890025CF7C0B1A6BD5BF
1F8E62D380C7849CDF06492BEC78C972A98021D66F223A6ED2EAE1534A139466
F7F62EFEBAF59A172E7C399C813547B1174FD1466D192A347B619FE60B0316A5
F8186094395661A69AAF53A7E3BD3C5EF9C40EE14F152404A2A9E6FB322B9B66
DE5481A95B3CC00CA240C2D0C81D068ABCA43F65C9BAE5C6F01AFF79466E3054
8E47E741364E315E7A1F78A97B5258F82A31553E6294578DF9626C446341BBFD
596870C7FBAA8C2D1D5458F7E81C17378490EF4535AA98A7C4D18651640F6111
41BDFA0CE085C7CFD4C1564DA7DBDDB86B8F9FE40B9491FBECCF277B405D879D
99AD06DC186934DC11D4FFF604BDFF02BCC2B21048AD4D0073D71E6385D4C4D9
61089ADFEDF156CD1FDB0EF00A2CB4C8358012394F7EEB8B3819171F1D72408C
D94DA0F89F0CD72EC5DD8A35BC7C82032E15B9CB279EDFFE6E9CD0419A4E7CD4
5E6B755BA6291B4A2D0D2E2EA8F9107F57A1CD0DC1BCA6FE05C387664C5274E1
D416F7AD7338F50E6FE8DA12D8549500DE8F7184AC1C22DAA15ED43C3280130E
66B092CD05F15786376D4103E172AD540B305E6EFC292F0D6ADE78769F5F0C67
7068CA53F9E800789E8B47FC3646EDB222AA43A62DE7B8A7EC2CF98EE826B1F8
8C5722B328A32153DB7FC0D24620B6AEF318B1F51BA07AB2EFD5869EDD3965F8
A4242AC43E43970F44409B59963DA8BA26F005B3E24480B5E84069E3BBB9777E
94C046EB10EF16924F6E68896161624CBDB39AE0A9828779D087FB176FE7379A
1E0C3DECCF25665190AE0502E7438B699565A77A86C79230D2C11C8B774E3A21
B6F06A3C36A4BF6BA8100F3C736B8539E51ED3B5F2E24544F41569DAEB20C53F
EAF133114E0FA326551B0D8C72CB958861F070413B53C9CC1F9DA0BAB7DA969E
929EF8E1296D1E70ED5E8AB1AD616AF2553957C1F8FCED0D20D2E23DDF408B25
70B5CB02243ADF3426A29B8301C201B1C093AB2B7F2C5468F362A29AD7E6050A
C20636D934CAF94A0B0A34132B421D84429864A06973D5CE099C30D2A65566FF
9BD30C2298072A289FEA35766EC2853B0F301B104E1CF97DFF88B34200252E49
131AB3DEF9DB2B643CD7FB89A2D4DE51770B1AF2960C636A84460630E9ED022E
5094A95274A43EAF9CC951E5A7269E693D33A40410D6B2DDA4CD8A399396C9FF
0E43E0AFB9661A7323B78FBCE77022D936B9257BA0DF89FF61D9A89389808305
DB1A3B04E4798E8490ABAB62C7C1A24F299AC3577BFDDD4DD1BACAA61F82E94C
4DA3833660306616B86F5F662FD5D2629478FA50DA46AB0F1804149B2DF8DF86
66B9E63C105B372CCA63104100F0B41F25295CB753B911D61749C1688A045732
61ADDC98FD25F4584D27A45EAA10D7BBF36C2F0EE0B6C308C9F3E4CBF36AD192
3480A9312705645977BD0DBB3A04B3D207437F5AAAD9DB9C3FCD502064E0C62D
94D507B96A26350FCC75A30728B466CC1CFE30CD8F0BC221FD595621EC41F196
E8853D1734DB5AD3CB9F3ACBE8F72F1DC2DE08DFBE6DDCBF05569274702D8C19
4DA6F2F526814A39591754779BC9A43D0290B2B8671BF71333A038B96C2427A2
30AFA7AC3C0031BCD6A18B07E42D6B672950B7FA61042D15427B2C27A5A7BDDC
9633B00FF2CD842BDDFD349A4DA7B3B76855BE18320425797C012500E483ED5F
0DBAA0E561D5BEBDACBEA5E61147DA32CBAE895E3737EF25BB58F37D26EE44BA
811825591EC105F9ED1D0CC6CFC5B1C7C4BF8D1F5E13DE598BE97D0DBFA1A50A
E73E4F6EF2091DE648005F9AAD4EE5C7978E5094127C415FEA0B054B6B616A31
0B359E1988F5B7B2B12DD0E90E6E76DF47EFD8E2DAE17694F4DD122EC62BA747
30BB47FBC94A2A286ADA25EADA4021020C2D36BAF25732064AE3AC369CD0042C
F5B2E5F5D2F762AFD790C61083BE30CB04DB77583CE1661E7CE2B97D9B3707C1
29BFDAF00DCF33D5CBB0BB8E84982A55F8DFE9B7AE30AE4F10B9CFDB95D66DFF
49A53A38A91A6C4B7CC2F54F76C08448A90755B18D945135F798C4CF55D105B6
96ABD19B2497B9C6E8ECB7D8ED484B6405379739FC1C351D1EE7B78D5B639E15
3D97CCB6DE9319A826EE341E2591F77EC8A023D096899267274C68F228462BD0
5E4F72FC5E5FE88D92585E303139F6B797ED5D612B25FCDA22A6B0DAA3DF92D3
61D4437BD119A2ED30BEFA6C0BC2869F5E44CF97FB2CF72B48101FC1FB3B3C55
129AD64FF5E9CAFFAE0A450B3497676C73D177B833AF32ADBD883692929A3221
2519F3D21FFBF5E7C5F9E735F450B2E499A6D13613F0CA0BBD03D31858A979A4
59FD5ECE61199B87A76B308D87F17518818418EEB99F31B9744FA6FA8FE73BC2
B8E0A45874A087C6C204670E3FCBE799870C75615C750124A141EE0C2CE6FF05
2B512A5C5144207F6F8028533E1E401C93E3A41C0524924CE609D29F7754A51B
EC6D7901ED4E9268877F708AE35FC62830EA72D063741EEE4370E8451B26CC7C
EC385070F642345A9FBB18A73402CDC248A5AD21D442B2E23EA98EAC18017F18
5CA01A318E1E3459B9AF43AD1F42BF9AFDB7EAFDD82541905BDA00E60556FC3E
C54DFFB99FD64CFD9BC4CB8B0A1BBF3F627458E699830CFB1813FA4607F71EEA
81900FB4CBE32740FF90A51E81BB601E0539D8A9AD9AC48E91D2CC1FC503D75B
47FA3DF6A48200874DF785DA062310FFA5E4AAFCA3B3CB371EBC4939FD73EC01
AC7EF2C3DA2C97EA374BADBD5B5B0FBC08314EF7FCEE635F9FA482750CB7D200
6FA1E3F46D164AA1D4AB2FAD71D11ACE1F495D57F3EEEE809B6821751AEE7DAC
23C645C41A855C91F0B9AF2106A410EC5CB2A4193F4E7B03C742C9F321F273EE
972B14D00BBFE3AC8A53FE29059046E547462D528A4BAFCE3DD2039C1D70B7F4
6AF30BD8076C60BF96B780B3FFF5B55010DDB9A31518512E1C6571459436E443
9DAFFC2584F6DABEFF3C3BF5B6386CF659A6B357D7C5843A2547E3EB94B98BCC
FEFC385F5B9B58FAE63C5AE739DF67F20BDCD662E2EEDBBE3AC3D4CF2F6A9A34
D3CC55C19EAF91BAD00980CFCF39A6AD3F791775EE7975D0457EB0976F8D5D50
7D6DB4ED9F076C646DE7FE4017F08C3531AD7242A7DD006098F05C6A7BE73D1E
9F912771258C06702339FF7C2F9B4DC094C9499D4738DB62AC5AC36B0E1042C2
DF68C090F1E59513EDD3D58EB115C2FEDD1A951F24BC7D98EF1B05250A5631D6
FB8054075B957026E0F9551953491F70B027B331E6DA74F299AF5E0297A5F56D
409FB2AE5F1C9D5A8B636F4D84F34C94A740FAE5B9B2C7B093FC1C2A202510F7
AAAD7C3D2D76DFCD3A29B14F8599E47E5CD5A16D09AB6D36E53AEBB489554260
C3A0D07490BB31667966E1105CC2D33286D1D09421EB60F09A239F4DA22A20A5
7AD08D7311AAF3AF4A42F100310D39BF17F907CA007AE87C88B22A95AB8E3569
A89D39F18DADC51D73F095AF5AC00BDC450A7EA235086442D9C55A46407C2176
326E88DE177EA09575230C2AA58AC5C4EA97EF1D961B7D42628E31FAA9B5AA11
1AD8D5A69B4F971CC2189896DC756415C131363866567F1DEC02C37D75758E9F
2FD4AC18AFACC7955F2C367238D58B68FFB9DC58F6D7B32C72EC4D520FF06C47
A28E99CBF639FCC1C9431FE74B8F5E923813923B0008764D265174197A832BEC
838DC89B0189C14F23159B8B347DDB265E4FEFECE060E324D4FCA7D06BBFA00A
57EA1CAFC959CFDCC6B5C9AAE6F72D24DD977D6BB4EC3EC8184DE1AA49F1D8D0
5CD313E951A56BADA40BBE43E4126F303E8B67933D6D0C42AED2BB666164C818
60D9D2DCF707DF0B6932EB2F4CFFB6BA02C8A956D1057C6D892CF12F4233EB40
E5B282E3D6AFDD97626C5BBFBC754BCF9602CCEC3DE879B0FDB3DDFCBAFDE6C8
3FDA5AA23D6F0E206D178B1152D872C632B9C21106EE7A5B2C98408A97E50434
8BBAC9C086BCDE1ECE66D2BBE12111B7A9811ED9FCEF3F40AD8EC7967B208E6F
82CC7ACDA765590EADBE402CC97DD8C9B41B497662C35615AED28787FEB38A5F
B3F3B52D001DB778BF3FCED8EDA14CD3F0C97A551748A6221E61007D36947073
DC272C762C97C0AF991C10DC1CFD93576370E9F14D18FB2B8A67DA113BC844C3
41F6447E9D8F49789F6F76234D44FB58D1A2CE8B3B1E3EC90A0EB18876191ADE
2F5CD56AA5EE9B0582C0D903903884A70577FC51DF191262FD8927E1F2FA9079
BEF8B5C076E48F8CF7B0274C43FD28632A10DBF860CFEB86629B4688AC18AFA6
95B8A43BFB934D52B155418A7316137AAB9847CC41CA01D05E731DECEEA44A1B
2CA488FBDFD51B3C00F0151B97562055C5A5A0E1B8F70101FC141149F230BD59
B7F7541F57C9D53D08C5C943181CA149AE04663379549886D88583B88CC0F5B6
9D59360B97735E7E9BECABA0802DDDAD2BF7C15D27A259C5B574D25D64C38EF3
416C4F7ABD7A0B5891D7D41F99233857E0943AB21BDD48DE34EFEB9FD677C30F
001538811C0B31A7E51857A3A5AED7B7D0D4B50EA35E10AC8D0FF9436885008A
CD2A9A9DDF8A82886FC8BDB85500824AE92A1CEC0430376476204FB44FBDE119
1BD1F60DBCF5175B964590D7335BA4B4E75F5A4F39D2063008B95A2CA2C12EB7
FF8A8125AAA76EC8678AA1857B7F560D2050AA8F65B067FB82C43288CAD5F5F8
841D4CB5AC5A4A9AF356346D8B69F412AE67F0815F401CE870E51C042B3D9670
2AC8A6670239C5CE7A430CDB1194A644435FE872FB1312FB024248786F1D7665
EF2EA7C67D04BAAD656D768B220850D99E7FE8C36B0EDF758E9CE8EB70FD831C
B0A860AAEF99C55F33EDC1417DFC965AC1D36BEF3BD009A53C8DFF32C57F6BEF
362A509C88571B16B8F55A1F5DE17A046B41990FFC815BF60CA5F67269E5D990
E350371D8E73D68E05A5BE78D3A76DE941C9AD24B9227BAC110480591FC05E4A
004686B8AA7E01E292207EBD0574601B6C4255AC77566893ED7EA257E51A491C
7BDD1C751E0F78D1C103BB559762F5AF78A2019ACE66F86F698A03B63CF37FDC
178103384E2FCE7DB509DAF01AE5AAD0C229B7B76B5B7CFF63B7B13C379125D6
B27CE66A27544EEAB270193ADA11A73D48725776C1C17EE5BB2475008D36ECF3
9E2A76B56FAF7FD52A1B8520CC35227C237D36ACC37190FC2C8A55D4AF036045
C146F09D5C2DCB96167858279CA9256960E4E38C3F6A51EB95489B3D5B5C8732
67F96E7B3F69BA316A8CD712357CA9E5D685CC59E9534EB53F713CDD543F7939
72D070355E03C33EECE1BA14664D073658F969F161DECB1CCDE01F4E231237F4
31AAA7508CAB2C9B6B62FEA61C6AD0CAB5E86B1E155CA70EC52081C2C8BFD5EF
7993D4E2257CCF8CDF0973B33DC3A1096A9E2D08D615612B610C951BD51F9CFA
B309317583AAE37AC6DCBD07B19173609FFFAC0D797F0B52AA4511F5D677B3DE
5ECBBB04D7EE130BC4DE38A10CFA939D0B2F2880E3EA3708EBC6DFD38B807527
C7E6BED7C6E9F3A000DEC13C6177DA9D03435AF2D324ABAF0B5AE79DD7350759
CDB2F6353094186A1E20E8E0AC2E5ED7AB776395E5342FBFA073329469255D5D
245132ED2E2DE1C12F0AB964CAE6308F917A4CDFAFCF5E6A5BA365B6FD422AA1
74F776B00C62F5BDD58BF41E0AAE0F8FC2D7AC1565D8ED11DA017D4A82DD41A7
2455B4BBF59C6E94EDD18CE4788C4D8A2F2CCD41A9D1E6EFDF8576038DF0FED2
07AA728E592BCF39873E1DF2523EAD9478890351DC8562A8FB32940E24B50B14
24ACD60E1A4D68499676164DD77C61D89B3CB8F74ABDC25566BC7B7FBDBF8064
E7463C6E264FEA2151D81EC39D768755199B9D4D2F3525B7C87EDA2BBB8F04ED
5F943454554B4D3F88751FF42C5FCA9F178E65F919AB7491625BA4BDCD42F879
A159E602B74229E62C361177CBA232FF2BC67C003F1E3A26844E3B7115CCFF7A
B3BC0A6041567A1C50DFF00FCF12A02C1E6DD1AC12CB8560844FF4D2A6D64DE9
C5B1D2B572CB70E5C2A24C5FC32CF7C42568CAFE07179D4E69F320FCC1C6F6E5
52AB9B2695D0EDAD15BE16A74B3CDEAEE10F8509F7DED75712742E47659E0DCB
91E2B91CDC543FC42F8AE36755C891564B5FC216598F52911A3CA8F770206ECC
0B527F12F380FC0948A9AC7A6B93B53AD78A8A8E1018F16E61686FA29531B813
0F8424CEEDF133E6275AB050E0C181362950AF9C4F9C514CD2FD616D959D899C
4AF3F08674F54CC31DFC8BB54AEDD3F17020B13FFA41E9CA235491D5F833B74A
15B13074EE40B7E1E270E8B86A948DADE9137FA0454FF241C4AC1CAE12A971A9
131784DC21980F04C7E9B8248D491B9F0D251D6A4275DD47821421D4D0F50534
7A6E5C1BA90F737DFF0D856E7EA07D3F2A86DE255E059CA4442747600E0A85AB
505ACF553B4C595A17FA264A2ABE91E36E7CDFE42357F560505F5842575649C5
5D9CAF749B98BEC8364EB1D6D3A6452768D058DD8D76C41CD0BFB489599449E7
929761E5FC810E0420EDA3A2D0445B5886416111DFE5BE535AF41783B8EC63C2
B6026EE48484D439B479DAFA17E2AEFF89E69D7B580D7FF47AF81AF0BBF8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-BoldItal
%!PS-AdobeFont-1.0: NimbusSanL-BoldItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold Italic) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle -12.0 def
/isFixedPitch false def
/UnderlinePosition -111 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-BoldItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-177 -309 1107 953} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8CB756BFBA4D5AECF4BE5E
CD4699C683E5E6E065CEDD296F8EEF1D3836662A861996EE78FD9D22FF3AFF04
47A8B7FD0FDD2F2867810E1559355E99439DEFA982006CB3C153627A15770AD3
9B9DEFFC210261733003C864223974E842F5C50DC4466F905B826F103F09117D
A18CAD1CD1C450EDBC35A1DDB1411A6B70DD82C6D263F9668A53A8D5BE4523E4
310D3C300046B7ED546245ED686428447BD857D2FC5D2F7C13359F95FBDBF0C8
65FE137C5706D12E3756C2E2722EE193DCB95928742FF603D2F8DCAC9381C8A6
93C435D832691D9F03E2D49FA26C67CE66F45C0097819521128F868EC3DC1848
830DC53D7ACDEADD8DB05EDA4C465B0FA706A05E17091D994579C89890897F2F
847729712FDDCD476D4122751B5485A0292278490A7F09E311F6188F2AC426A6
8702FBCFBC3BE34A3F6B57D45EE25F3332FF220108296B151895D06BED1D9B82
1C9EB7946197ACA04E7EF6F89DF820042478B5146078201573D3E0C5CBA457CF
17E17C8CE317F8047C0A8941039B7255CF90F60D51E1ABE0CCD86BE3F28B1F64
F6DDB25DB89A6A408985414BD11EEC5DE5200200999929ABABD227CEA73D9A47
75083D96B0469B6CBA06BE5ABB69368254BA6A28520DF69BEB167A68E5FD9F55
79139771FF3CEA9690EBC0759A11CCC3FCD5501A83B2624A5E8BC33B04E27901
EF48523C4779D9317A295FCC99B62A4BC9C8DAEE06FDE9B482A53B7D889A9FA0
379669AD9D9DFE63D85FB36204B0C56B563C813D8FE5F96EC166CBCA4110D1F8
197928ED01932308A1C9F4C8CA95E5EDC2BFF60C929F02AE87F5D62290D83B30
45AE7B8381255F8C39C370F9E9B0E4820B4185F2DB8FDFA795D4E0F57AF743C4
A1453AF3FFC96A7F864470FEE912C7A16BA596C8D1286A8B9D15CAA534860B07
AA63CC8D12DCF1F26DB6592515EBD6F73D859B5284A79507F3C72F91FE52FBD9
4E874B160F4127D197DA2A002BC060C16431744450F86AE90725D1E3512474C1
AB219251F6AA6403B2300DAA11C9B137D6546E16606A01AF6C1A517F86521239
A56F00B4AADD0F5E3BE80E8E12927C72729B927028F9D51AAC0BA2AC46023482
3DBAACFDE46090620111CBA2BF103DC7DAC944EA959C23FDA691175E5CC23A30
FC6D8AD59A2B62BF68EF83C60ED3E82344C087F057498AE4C65F81C13450A507
3FEDBE31238D938913662C94A4EB6454A898B4054C330D946E34E5623D6F7A77
37256C6A801B16C8ED115437A8EA8CD328F1AC2679EC035DDBA628E6C4EEA8E4
B391FE883E55CC367A9EC6EE5FB3A93AA01DF86760FA5C65BF529FE28F51F51F
7358CF4B8B6C91B77EC2113DCBD52BFBB5FAD6BC8BEDDD96595D60F3C71202EF
BB239176139BA9397B57CD7CAC1B9E570FF69A6A7A1BC4BCCD57458FB78C6ECB
6460A281A80F502523BC02292E1D1E45D1D960537872CF44EE7EDC448F7503B1
CECE5C9E8B1068DDB8F66680F51B46E06C9E9FF99BC9BBCD2FD33A050C1CE357
80907C8F73D5EC0B69DC22B16412C503A95B3A733E367E50FAA92A5996F8CD29
074D751597C7C5D25EE9D241443F85CC936AC92B6A636FA105CD31AC2704D9CB
29783F12C090F7E38CA5F4EBF0AEEAC9A54A0DA59DF302B846C96D30A3B7248C
57DCC3B4CF0008880A1663932AC35AA2CB73748ECEF725EF5CC6B22EDC09857D
3E5F676DD05F584CCE1BF2D4C7CCD9314923F532E28EDC1F4EC3D0E698D82030
16D1DAC8CE1540946D3EA0CEAC72D968371521CF9C5B5D236084CE103F56B0D0
815CF27EEDF796390EA24A31E867986EF67FFF02FF5918214A94887DC1FA3505
EC5910846946C8345AC821A323AC91474BA2A1030CCC3D0304E8E18BCB399923
CAAD1FA80328613C177AD545C10EC243BAE06197E7A600CCB5DE4956F7DBD216
6C4A311A0C52ED00D2305C70A416567F5EE87F17FF4B7D48BAF74C510DA89C33
4B801270FD3F890255CE9BCFB29BFE08071774366804FA232E4AE96DF49C9F35
91DD4C298417194F7316068F4BB7DA76A84F8CC56D71647B8F6DE3CA2AF29DC6
0C5F34CF57850EFBB10240A344C911FF165960436A8BDE59944B05CAB6B59E94
3262F2E6EFB223B25C16F0A20E27F579A2FEAD03D419801615D6C37B6C75375D
31E27DE292C1F15E0F0B55B5AF9FFC5ADD3D2B5BA7E164B1EFEBA210E10A03AE
12C23098B235D5F448AFFB74D751897E8E533A2C71F469930F2967664F0D17A9
4A65D6083B5CC6D1E2BCE00279474109AC67B7D0A034352C6AF70761CD44A5B4
55EDDF989254D0A7238555FAA62346B089B8C9C706DE4913341530195AE2B431
CA70822EEE059687FE5220B6547F10E5C09F9E499346B2E68D282B565E841B40
98228FB6D6B41F8FE51016A4188E13E980B20CE24ED96E7EE72A3AD5AC654B29
BE59C9A7CFB6D6CBAFB766754C0E8934F9AB738930EB70BD2912BE0F0FAB91E7
C13E732A0D8600186A7C0EF8387987705ADB7596D0E268828757AFC19E45C3C9
4A6D7D079DB00F337979DA04BBD485BD56300DA794EE038B8E7A364F21989024
421059D0F608E8471A5D0745E886BB13021AADC9950E2EF1FB69E5350B281CAE
AABB0CCBD932A4C517BA7C024CE791E9E85821EC8FA207A636700139BD2029D0
E69C220DE636E9F3805E2BC5A4062A9DAC0FEC368B11CD07341EAB622A755FE0
4636F3AD561C22720C0C78F40D46FFD5B2E65602BBD7B6C32B93B36DC34FFF37
49BBF1AA29F3CFB26DDDE69D1C31BA552A09B30216F9A60D1F58E74D093010BE
69B19DECBD09D239CB562718A47A2340E21AE06C722EE5B99CCC94A4CDB6B799
6277C97EB092E8B67FE340AD3A923D8C7BCCBE3D2F962C2514671FBE41724221
1B44EE1C72727E7CC6A042DBC2011D60A37AB6D5AA583BA3071A842560444831
F001EEBBAD4BBE91975819549C86332833AE6FABD7868A1AA52DAC728DF3D37D
34429519EACABAAEE6384883F21D51527841B442931D89A2D64E9CEFFBF0E379
2A219D478D94E0E068E55B7186855063934C5716EDC3F5056BDA913482FCA08C
17ADA33296FC68701C42E853DE286F4F67E3E5417D1B42DD280C1FF9A88656A3
7EC8F5AC91BDE0D580C7A4CFE322EBEEE121B8D1E12460CE7617FAB19F4BBC99
3877D7DAEFFD70625C247971B8717DB0EE7B2FE3CA3A9E28377344108FDE041F
82CA8AE9A71D8355469B9236AAB34DF67EF844308FE26F51C5F52B2C634DD11D
27CA2F8D466F0FAC6C620566585161532247A8570D8054B66357DC12715E3B92
493BB676DB5BDEC8D01F9EF165EE266A27DD67BE4D8E8DA37E71F77CB700FCAA
14ED9D389DA8EA6C85499C44756A452032B1E6EC4886C66B9308D1E79AEC455B
C6C41C0F96085A17383690C1AED06AF4B54226E520748F988ACC9059799E313A
D852E04AC27415696D7855E4E533C172791CE28391064CAE00594FF3364FE669
761A206E268A521301ABAD0EEB3B1F50C645ADDF0444885D75C2AA471F1655E4
335231D8E56B5C98B6DC951B831016F38D302668F3C320F549A15517F804109B
EAE491CF07F69396C35AC4097C4AB7A7E40316FF7A74B59798A8AB7E8D07D3EB
AA998711E0465E1AAE17E74B0BAE5BD03124485D0C3F5AEEB8473137EE9A79EC
3F588762C66D9860B6D4FA7E38CDEE4F0118316B655462C2CDE5EB6AA58665C5
49DAAB92ACAE652D11CE7CAD9C99FD237E818F856FFD83EDDB6CA773A51FD274
161A28F3724DA810A30D5E906034D56A7A70D59AB73CA633E9DCB2D93694EB75
EEC3DA760514F3096D12ECF20972B58E10A8538F7BD2A9B5726E510616412B7B
63E421AC2C8430FD153C8E3B9F839797A135916197A48D453611484DA293AAAC
68E8CD5DE7E5A67D422015096D6A998EB98A49CE1437C45AF1C4FCA0277DA2CD
4148CC8195477C862FD07C2C3B72529D338E22402A30C823DD655DAC4723572B
DA9373AFAA94F4E4BC09510A73E079F4ABDD8F9975B5E52199FCAEFE1B7B1EB8
1FAB00C2CC543AC024BDF6F1C133040301738DFFC58125250C5C9AFBB02ACCC1
4796A19EF175214EB32A5FC96F88FDB8F030EF95CF24401C0062CDA6EF5CD179
9C3C0AA90E2C30383D743788EA213BDFFC5F1C26E989F0A5E15AD17C81740DAF
E000FC747AC555430AE917207F2115CC2AA64A073147F33393A1C9998AD14286
63CB2670E0A59FC4D1960C634371E5E37163D0724651FD406D67C33A60306F32
F55380379DE78381863F48EE87A435030C10AA24BEC683A9CDCDE2A23F1FB669
5A7A2CF4B3681CAFD7FE9851244F76C0158D9A57981BA528840E4C5F98BC050A
5C19D33959111DC971BEEF45014EE987DEDDF0724CBAC3C084F337DA03080E86
16D61609F020AEC64C5DFFC9C560604F6D819297D1C902409E2D391E2FD8F764
C2C694137AD6977FB40FE2F0786E979497CF2A3361B379302099E745482B20A8
4D10CF5EE66EC145741254B7DD0D56FAD169C1381B8813319940C86B42316E6B
FF0015EA3475C6ECC5B7ADC3D0709579EBAE53D3ED1C187A3017F9826537E5E3
F912CD73B94B809A4FFFE7878DB790E3B18F346142115ABD6C8AF9878CCE0DB4
6F6D1CA04D528985E6761555A8539CB7A697F51BF64383946F2F6B69B71DEE35
62DD682BD1CEB993281A2E43D22CA9CC7D46DEA64EF2CA8C38DB65CBEF73F3E3
4F19BFF531373F368AA90C36DB2D6C3E62D4026AFAFE85FAC8C63664262B0DF7
26CE5FDCE14D56D38E2618E1383678A6FA47A599EFB8083859668EC40665A7A0
4E67EE2A29693740E61B32BC5E09438D2249919CCAEAC6FE0A2813A351811AC9
CB03E8C4F911B346B8ECA788F01C3FFEC847838CF3F26980554EA40A05E89F5B
790895B71E190B03EB76FE3383700A594A2ECD1FB28E3E1325B779C55FCB15D4
396A225C3921CD2BA8360EFEF8AF53D5557DC315AC891C390CF866AE4CB7B9B4
AD205FB42ACD705EE5433383AD7B7185E3D6DC914522AF67480FF82FBA45B0E5
587B1A08BD95826093D2866CCAB3CBE808BE02057B79137149AFA369D9A926B9
95F2022CFFAA5B108FCBC3FD8F1EBBD429FC4E13646BE60D662D038A9E499394
17AC727CB2E1C03ECAF94AFD4A0C366C7C7568FE42734237339A20EEB0EC4057
0047B5BB4D95FDE0E7E46CF99B117F95B8A1F921BAF0ED78D89F33F144043D0F
EE36BBF19273FFD98D851C9629B978FA10CE2AC0425C7839991EB7C420517C21
CCBAD3E56801DB21DF90B45A73F62F5849E53B26AE30EDCB46ED7952DD4F10F3
A2F4EA31540D0C965B51F33D505FE3ED168109F1F39AC5C3357E48C891AA123F
9C30FF7F2B77E767A4C9492E72CFD969120313308ABAAC54D93F05357FA5E3B0
09A41E67FAEC8A131D9056D60135F7B7941CCDEA0BC0168ADAE8A1716BC8D900
CBE9A5935DFD15F5C181D6853342FD9AAC09E009A96AB81CEB69D06DA03FAE47
6A30AC752C65104F6D08ABD77668F3F3B384F9C5D261A436D4AC3884F1F43F7B
6B18C2D28AA197C7BDAAE8948F98AD8CD13E60D78317ED876CC50FA0C3717EBE
BA350D9E2E576FCE083A674B57E7922E5AF1A24C6A3AA1B1DD06909412F31E12
CAD7607D6356E5B816518D7A134D1C1CAC78ACA885F68240444588FE68AED171
BFC7FF2558CE2E0A6CC903A4E3D4B89D8529FD28B57508792CEA401C06D3D5E8
1C497121E89D672888605828ACB6C94E06B7F9CAF79D1D1A0535FE16DE3909DA
113266E3A827644DDA7044E0146ACC2771C893B96FE305B9AAE350DAF2FB4793
50B20DC2EB1D23DB5F4D4D57A3DAB7FF02A992E251526EED1C43DF19797B2A3A
AC75896620C24178271255CA9B40078FA52EF907687D674AEEC41A3E499C7429
45C58CED9292843AEEA156D50E50E788FAC64749709148A7D4FB4FD79B008246
BA26A718098286F1DBD614721474C76190545A99D99FB26EA98DEA4B7257297C
FB9D9044910D7A0C4A6A26EB56A1A92EE146DAE7EE3B9DC889D500CEA2845E75
5D2245CD24FDBEB17E13CCBC9CC1FD958238DF95EAF9722020F7E0929CC516EA
851C87FC035CEA0FD5C11F1BDE5D779C72C2FB8B8274AB2B2DE10A65475C5347
4D3AE97AE09322301D8FD9B5299035A87E142A721FA7EF0DA2A9CE7073E0235B
7957AF8DFEBD16DF416A33FC53B537B3ED9960F3EB9FC0E9ED974C8498C154CA
1CBC5A23C37E6212B96CF877BD735178652C71772D78C3357C7425101D000B06
B7B009A0BB87E4B3594AE9FA22C3D4FB2F2364604D47696B7AF42DBF44ACA9C8
FF965B2B586870CC77ED30EF0AC5B078D4B064F76E916273CFC0E69FF9EA1145
03EDFA262A341251D88D0250EA92DD50958EF562EBBF2270E40104CF4274D501
F3A8308A81B24490AE553B9871E608E8F9CF0D303C1391F0FE6BFA4FB77C5EBD
DE4D31CF00A0FFECC8A7D0D58259E53A4B20129777C73D93E74965302A8B4AD3
F6880ADF3C06F87F30465B40B60588F461928E8AE8B2EF2E3952EDA00468957E
9362E7777C941C9B1655E83CAD3407D25D6A735623D7456CF1545BBF780A75F6
A2AA7D68572843B2D31AE1D3CDC88CD082F3BD3F6DBA0F86CFD6265C5DE6726D
2EEA59E49433CDED7F94AC0DB40FB189C4568BC7517066A4BACC3DBDCDAF45D8
90547443F64076FD6BE210178DAF07C08B8553FFCF7C0D786284FE65C3A51897
7838BC8F3FF99E41AB8CD211371E9F18F27FE3A290B95DA276FF1DAA0D733268
77CCD42AA3DDB798D01093F3F2650E91092FAB9E76B6F534B08E183D5ABA0008
3E27D52B177A88DDDE8ED59A44ADAD5B0F9401C787CD9E86A1DDEA93BB167E39
2EF9711094A6EDE54A1BC5E7269F5317D031A400EE8C4AD035FFAF1A1F25CE1D
16865F3C7ACFF6ED4EA6DFDA17340E96AC3D14495850B3DBD091C7D41B785983
5D08CF0AE8B33EECBBC7A04E9387E3E188F2F5C21CDB95994F56D69D6C7E9ED8
9200DDB63772D73C36E0280F8ACDDBDE5CD4F0A5291C01EC500AD6EB490419EB
1278AC3AB78AFC746F02D9AA725C64EAC7FEE09C6B19BC0A005A98BFFF6F04DB
3C6BC318EF55B1729E6C09E3ED7565083022A08F3491A6C7B322B19204F21AD8
9472BD619890554D9D58188B7208F7EB425DE4D7070B00971EA9716FADA25408
66860949C2D91F5525F07766B9B86546F34E4578B4D57231A1BE97FF258801DB
D48C990C552FF9D10A5906B98108F20215E5779413EDC2D0ACD6B061D5605016
D07B13B1C5B73DA8B59728E307A9603C75F00633AC1633489FC0D4141022217D
9F1295857EDBEBCD72E0B4E2F317A0A07AD7169CF51B70F70B4DBE0B9BE5BD59
4961332B974A3E64AB59EF486B329E785A811370E4B282DF3B09622F2CC18892
DC7C349A61C63C4BCF1E33F6EC39837B20A1C19287C6827E52676CB6B6AF1CD9
87694BF84B152592C0367718E005EFE11F788BD6742D8AD35A9790C6D2956701
37216ECA0B513D499E2268A03B3BE4507B4E49A3544E37F1A29F191028C92E87
DC35EB4E5A22210AFFA89CB8548D2DDD50B781E616368296E157EC3F7F6730BB
7CEEFFCDD1A56320D4E4B9F225EEF68B47F68F626B1CF210E5CA1FC2596EE50B
5E98AD9BD5019C319F19A8810903104B7250447899CFA657D9FD9EC2BA191A2A
B1816C49D224D9D8979DFAEEC290AB0AE2A57C9A8D4672EFE15E105C0A0D65B3
435216B1B7ED635C737569111BDD94B862E082AB04792669DE7F11CE8C696E75
BFF4B57371463793BD53A64F0CD2BC97A2ABFE1AA149CD71FD232F757759485B
F4FDD831E91CDAD03551303452A50140CB1C9D09833F1973860F73ABD6246649
E06E2B55C22E47F90B08142CF7EDC4708E30F9180F3E81371CBBAD6116B72FF8
6FE7833135F6770AD4312AC1D3B8A10704DDAFE5C277543D4AA0D04B09E5D905
8263BAF413AF6E3D30661A314AE1A2331F4430156BBA76D57F6007A5510C5461
FF57D0EA87C36BE1FAD1154D149F9514DF5D15B9FCD1D3FF8B56D7A59C7A2F86
5F7AF9524151D168AE21E8AD171006DC6600486B71B555CA762940A5D35AC43B
CD4166133669393232AF0DB177C37546FF0F3FA1A488775BE4304D9DE7EBC758
287C6DDB561174CFB11D3043EEAD380C9ADD951EF4E259CB2F1E0DFEF3F264D9
B200E7A0F90060D9A278E32847B3CE5B6F1BAFD08FD82A6CA25535DAE4E76FAA
675D6001CF6C21783F9DF5417C3912D85A0311DED3006D6180158A32605B3422
B1D6E94BE7A2F91BD2A539CBA73FACC5D0BDF45640D8C01FA3111BC88640F15C
F3362210F8B1153DBA993B282379E3ADCC0F23D20BB65CB98306DD53193A6B86
BCB5F2058E9FB0822877F3BC5ED86981699B8D05864B33FA59A81BD042A1A7C9
97B124C1AB303EE0987E1FB624B86273345B674E49EA847D2CF343B109BD8F2A
FCD8ACC17AB7BAEF735A2F242A55117D92BF54DA82FFF7E4033989B5780CE904
24D2FB739167798B15A1B5CDB83222683666D89D7C640AE63A93A00043F70438
2AAFF04FEF09F340DE6CA9B1E1903E4F25C4C5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC13F154032A
A1C45D1A3DD9230A4903FE5523D6EE9BC66EF49B2617BE3C1AEBFE2BE26C3778
EE778AB577C5B9E476CBB0EF69EEE350BBEA9712CD97BB2821612964B30B01E7
B08AE39BC8B715A5C11A351E060C8ACCC73F7D8B3B33CB35844961E68842CFC3
601BD2FED84DC32546F253D218276A5D0FA4EA5B7097CF596003D3617599B54F
1906A591A51E07E62033C058BC757D174B90F05D39F5768E81C9D713F998B6BA
743C51CFA8255B90F4E82F3C619A92AECE2660BD3019B098629A171AB308C6DE
05CEF99710AF2F9E27704C61242B4B1983A5D0B134C8052495CBAA9D2860D28A
6887CEEE576D4111DBFDCFE9B3458F27264F85501EB8C86C9A1BBDF3E1C9FA6D
058BE17FE12B410940A6DFD0667DC444D6342205506A827D20B87734D27AFAA0
23B97C367CEF276C725B73F6E2282EF693BFCD7FD07158CECA1F10A5D75C8B02
FB448272CA2826E882D4FF6143BB5933AE882A540B806AB24350A792BFB5004B
54A8631F85FF8DEF675A72FA6DB3EDD6C586F5C0FC8BCC3D355A4F3C7BB8FF01
13F574C1BFA5A90471B7D471C3BDB86F519E59A0C711962F9EC04E63E90381E3
A52638877B18EC6582059C00D8FB590080B9F865D19D39B03D577C85C3A6B25C
BD5B84446144E22D8BF12DE44EC69231F93CFF3D70D84F79EA28D1F2E996551F
69A140A662A98CD3E5784832771909F986707330ECBB978C088F44633DD9300B
A685AE4898298C84706D59C727C55EB86C82535969EC29AAF2916AC16E116A1D
79D91316191105652871FBD49505395BC6E9DC477F6807DD209828B487303133
5BEFD663C5F21C125165A6507983B4F3E713B1F80CDCD6D67E6DBBABABC6D3F0
780DBCB0F20CB1BF9498BA400A7FE6EE1551AFF52F20E24FAF645634CC60F004
8173F52CB3EECA756C4D24FC6054D922F59B1051C1DB11E62A9D8E6729DBCF6D
C208C10B6070BB65EE1ECF0F89A85BC37B8C10FF3F7C0A84FB8D0F4A7A77ACD9
152362D162698BC6F7535E14CF202C75FD9ED2D5F2FAEE3A06766DB1C758286E
4A4CE5DDFB580A98C6B50BE8937089322282B7C348D9FC840AB53EEBD3C4E7B4
CD90D42A0448ED25C65582E03F083CF711C3FE8BC6D819708103BB963F6F0BDA
611B948CBEC9FDE48E4212282BB7BDFC55B4522C394B3A5441598B9F377D80FC
CAF634AE7A1D21B652818AABE247C5D5654D0F63DCCFD3D9B0BD93DC13B78CEE
8C67EB4676EC376DE1CCC33F1B16293C41BEDF0166739BD457CE6C4948B183DC
8CE6BA6EEF1516C01D8ACF2FFF3BCED8D94A6A5714BFCB508BCE7F93E57797F9
BAC5DD133EE410DDF4CC88CFB52D075E2DD5A9A5121F9FD0A2354292D07DA5C9
CEE4EFB147786586BEDE9B4149FDA3718EC6D982C26C96439392577194BE04D9
71C724C8E5D25F8D2B1B99B73FFECCAF7C7531842B95B7A113D147311B7C07C1
7737878305488298DEF3FCFB7EAC507680ACA37850B30D1BBCDD128AC4835989
37251EB45566C1D73A8143C8A24C4A470432BD989259DB99A23A6BF1BBDD51D9
6BA4A5207AF1044E917186B2F2248934502D0364D400AAC31575417A295DA0B1
7EB9C0EEB4C75EB7B3A707A6D447DAEFB6250ABAC168F75424EC1C28487B7D93
628E039E14526B19E4EC111D73E6B9ED582B811FEC555145C96752D543699837
28FA5056750445A72783A186DA89F02F2C8CF8BC727AC029ADA68F6A0DDC1BF8
0268E5088BDBE5E056BC8558430EBB1AFD7F47CD6129B2FD9FF30E64CB7CDDEE
61D004EBDF64DBE5620D5FAA97914866F3D7D93AF24E15521D25E3923F0EED07
FDB1FBF66D0C4D01EE37C72468503347EA1A45344A43E0DC78100DFE97213854
E56C56A2CB0297E6C99E604FFF638C9DB5F9E79BC199ABA21AABCAC412960C8D
CA687FB2321C2CF44332568CF7CC9A7435EA85EDFF3B0A157E39DCC343F2D392
0313E5A9C8A3603548335C8B5DF634573953542BC744A1FDE78D9AA4A3309281
7AA8C18BCE2C56D62C61B6AE529213EA0C759261B8B3990DF96430DB6A5D87F1
15DC84C3E7B9118F8C4573B12581D421F8FD3457D86F22E2A99EA46BA62D0C20
30C3D6E416A1906549DEC9A6832CB0C88801E9FCAE0488C7575FCBA0C125919E
AF3E1332ED27A5138266A35BF389E8D7C87D591B48AA9CEDBC6AFD535F6B5C9D
0F4B9B7BE0BE1A20E50B6D68148DE8830830C374D6FD6BC149DE1D18DE471230
4723A557C4C0F1191116F1C8B82758E41AF0AAA514B1A496AF69E0C2A56B23FF
3DBA241ED047F1E2B23D812346265355FBF2F458FC2B5CDD259155B65D098F76
D3C4B030A8D0BDACA089EF377C78487CB7639CC4A9200AC342D2CD79E14C39DA
6BE2D42181EBE2D619D2EA74D6613E87DEE38A2A9504D47D4E0CEEA77CCA98D6
2B1B218C8B371843DDF5DCBACC2CBD7AB8E5DF3744C86A1FE55F5369B12A0585
13319618832126F491688AB4FFC28B25F44AEF8261BB77AFE5089DA5D63471EB
F5739689B9658F75B4746F0788B2488FA43925639BEF4B041AD7722616B477CC
FE4F4CA661F9FAC978C8F9FEEB8EDE51AF3554AF92E3AC332CE5D9D36A9AA32C
283B25D9E35BED54243580FCB13FC78BB32742316AED9FB75942C9699A2519D5
9B10DD957E3BA45983041115DB809118C0C95BE17EAEF002ADCD02CF37A18E90
172263A1C48D05DC8B073B786001E3C0A4A6654B5CA5C52ABDEDAAE93403C9B6
83EBD6128A331B73787337CBC0C88141CF5A6282B42775B0DEC7BCB1A2029930
5C076AA35F08909F6C62923194CBD76BC8317176D6BCD6DEE6CB1A043AED0E2C
37B291851D973D08D99E12B578C4992EA47CC8C08F8C95DF577C4FA8DF712566
6E19752413BCA4AA218D08E5C1D7EADD27743235FDBBB8F03D5199A7107A1104
4E77CD3EF17820F028D3BB5A62CEE358BC3B3B11668CD1C8E6BB62686AD9A578
9324CB18594FF84838E0C5AE2C3B640B27A97C6DB50F35DBA5CB4F5D60E13F79
0261578280B7FC624D14E092B389E47E558171C0BA9304FC3ADA152A9B36B0E9
4DBFDF8A78969FF3C08562DE4012BAEF33DC7A223FA4C55FEC2B062491590FF0
1EF0F36E918D98C457C8AAAFD080AF068F7A1CDE679FA3724CB3A907409AE496
97793FDA280740A7E94D3CC66B76D7CF66B864BF28379BAAA73D319436E70DDC
7A18B33F2D23C85F5C6850A81999E222EE77C577ACD8497820DD7D796F275C98
B5057CBD999F567853E59D289CE6FF6E6DF037774F75575CC0ECB393EAA692FB
770AB500264A069FB5FB76303F8D5974F22E5C80C90EBE4A7C1CB5203CE16BA3
673DD434B01E89016AEEE494880B8E01DEE10164CC53EAD28CE88289207B582D
D18508705EBF4B261CEC6505F0751F9A6B49621C37AAB48E608D182BE8948921
04E4F48DEC37B07F2A1533CE0D60F86764CD4B6815BF8ABC55508E470D0EDDD5
368CAB8B5A9680F68EB365E07919B2D02EB26183F5A8314D801C2E8605F5F2EF
3582D1B3C4A1AA612DEB98DF46E97EA3822D549A3CD568D75CB71C6DBCEEDAF2
FA64C4CB8948CD2F74FFCEA00B72A102FC058A42C3F406E3C855E9D1A709D40A
888E46F300969FF873875A2C8E31559C8B61790857547C6FCBB35A79610367CE
4F649B2414EED3E50445B7E8B881265EF41110CB02E8B9802D06AD9D338E2240
2A30C823DD655DAC4723567D5F81A4452F2FF1F6287420C0FEFBC8FEFD8F061F
3F1E02D78A360E0959622E0193D569D9A5443BD8E8BD8C2F96E4DC5999D80D6C
8201E7CF3C03CC24D0507A9186EF1662963564B1A7B48E1CFE21935A45FE37FD
5D5AE23268E3D6EEDFBFDE9B949045C22509DBF7E1E1A36E82BCB18E1A013751
D1FC4EB9C86408F0905A5D566296223903C9A02FBB9029EE429260BCC53B76CB
0BA4D55667265DEA08D675EE1606AB27A88E8BFF0D46B752EABD1A980E73841F
84F59EF2630468B0E8848C1B8D5A456597BEB045C13B8F0F869DAA1C6DAFE689
8514AB0270F190ECF292207639706D22992421FADB56A309903FF657764BD9A1
279DBF84B4A553E7E972AD34B24C63EAACAD82CB34BCF6D46E5276A45C8E4219
4CE5E0BF29A2714A107F411F9774670DEBAC06E0A595D808662B7F771BF897A5
ACC1819B7CE7AEB9CDA68D2182709A4F91F7F5CC25780FC96C86DCACCDA0F80E
F3679D0FDC7A12B30E7FD5B308683D37A4768B2230685B52626F5C6488D48374
8D9A200FB051430DD48A16B1763750E44E585F4C895244D292940A138DFD2DCC
30CED8C4225AEA651A81DB3696B4F7B820037A908ABDF3F8B7BC02DB98DBC7FE
A6FC0CBFE02FF1DD1655A4F6E174AF8B9931BEC0C3695ADE19027A8CAA903989
353021758CDD56B3132BB7B7A04B57F2471D335A8F02161BF1293E86EE719C9B
5CD6DAAA688F62D683FFF6BB7EFDA70977D486D18C10FBE195EEC727997C32C9
EBA542B8C8BD91FFEF0273883D3161162B99A4AB4CB23F4FFDDC02FBCC202CC8
0469D500011FBF17D42DDA60F38DC5226AF8997DA10BD07DDF40A73004FFCE55
9165CA1F5D2871DCD98E95D1405A4A22FF8FD008BD44029102F3816395E75633
5EE6E9E8AD15DA3626DFF8E28733D4858BFBF654CBB601AF91393F5B8F531040
D3A9E779512CDFD06DE983F5D885D78503D27186ACC5D786F7E1CF1328E0AFF5
B3C9FA05A621D3B19BD787AB09C8BFE1367F62FA0984451273B45FF8F954116A
FCD18970887D2B041EC0526217800B39312F234D4D016B2C4C84D1A517B53B0B
EA8A936F9CF329B2F4350B09571E9D030905B62B3F55887945CE1EF5DA1909F3
BD57CB693C69019AA02B6836AC76C0D4CD1758A82291E07B4FAEAEA3D75F6943
FC34C1D52929681B5463EDFAF7DF63DE889BF2B23FCD99B071D052960F19A837
105B674EA041619FE29BC14DA5E5B4384DF24886C41151A392B7EE1736CC446A
E8C68F727AC788A0FFC3EEB38F36F89402A350C722AF53D42EECAA6BF90E4918
801A50537C4A008FFD8F6777E1D67475BC144DA4018CE9D2009687FE5220B654
7FE3F73FDAA764256032A5EE84D0E42BD623CAA8C42036948FFBB14E860C5D7D
919E27166E29F885C5329F06EBC2169226E63E6694438E44FE7759B738C45502
11BC4F480EE8BCD0103D072882FF2360B2658907CDACFCF46AAF3069248A3907
34949816831B9027FB4B449A39B1ACC05BA466540F38E107A2EC4DC0180ED00A
EFBA5A2A7B9BEC5B4DFBC7D89A16EDBB76C02DB29FED2749139BF0A51A5A9E0B
6B832255832C0A2A4A85C0DFB2B43B0DE7F4966E008C066BF6EB9CDEC371E8F5
4D5A460DD5DE00CE7D6380CA9584EAB418D334DA613C29539FB7F8E165967F11
95093B2B53FB1A9DD1FF91AA3CEA5E4E540F41DE1545A48B8D95C5D8F68706B3
0B92B16080915B0C53A2170EC9DF0F8C3A80B6DCD4697B7752DF12BC7A5BD123
360D665D61D5BCF76F4AF1E5E72A5E713F339ED8E43DFC3C6C5837DE85B02780
25522F64B5411F61C96FC51C30FFEDCECDFA28A951DD5211ACD684EAACF5FAC5
409884F052D1DB422D245201FBD6463F31D37BB96E28F91A54F29EB0FE77777D
BFFEF862CC94CE82218241404C817414D0579308612AD113219204CA439B2B0D
7F86EB925DFE31A012031F36D5F6099187724B0AE4117A04277C8B701D81BF09
51FDC6C238657A7D1B2B37E7F432BAB81F8FCB42A0866FB462910DDC08CEEA61
CB84D7D2B0652C35B5C82BB0EA061E3521CF9765A454DF681EE42A0F23CC1762
CCA69777B422E28AFA3499B1D85C3C50CC57932BA4C9DB0F157A077BA07252B5
D6755406F6D38EF3ADB6F918B8A1FAE2C0A459FA2AEDE1B5ACC0D1A36A573708
C2EC010028C55D9D6688C530A9C92FF1E7D53AB056B9EAE6696DE4E39CA05A8F
919A4BBCFCE203F86658192FA198348A5849507B6949BCDB9DFFFB6986E143A6
20190406409E997AD5336173B74337EB61D334973C2158D476D0FE07A59BA918
B9C9A27D008B8A0BC034154D8235E164F0F09AF34B49BB6272F1F86AB5A8AB99
A93FB92613967677B0AE4AED07C0C9A01B8C82225C337F71B5EB8AB5D5BED76D
DBC11CF1AC5BA12B94FD35EEA17FC82067EF415C6D2678A1050A413F054B85B2
11559F4AFEC7130DE52A49A3D6AD32F7FBA9176F9E1D63B7D3AB324C8913B970
9B0F9117F420C72F0B5C495F5F924621C533828772A4B86B024E5A466E50BE11
3EA407DC2D81A5BF2B15D6F282FFF98DAA653964458623A04872B1F241DEFEAD
3AA2438A97E586151E0B684B266246D5795BC475B154AD31AF7237DCDC248322
9615BB0368A29CCD6092CFAC2E3E8E01C249CD3F8A7D01B39F4C5BB7FD2E0148
15DAEEA631573D985852AEB0D2D859148ED8CABAE1F4B16902BEE07B567FD89D
089BF9EE24F6DA43D1D27875825BA4E64C33C26B81376AEE47C8E3B3CA6995D9
DDFD7A7FAB1BEC5A71F04A08E9A86C68ECC89CB1ECFD393D5B30E3FDE76016F1
F533C1BEB71D9DD7181880277CB63D2261435FC6EED7EA2DCD24AC2F05338B59
FC27CE4672863A43FD9895C78869C161CCC018A9E1E800C567B7575695F9A7E8
59165ADC4C980F34998D85CF7A374980F9F3A5DEEE3CAA80284B731B70791C14
475E9EE4972E9582095B45B99B0AE4318C0EC418B402AD13BA1DD4112421D6EE
28D15083E4DB9BD4DD7F9B234663472CA4FC835DE3BFCC34C8C96712DAF50891
395BCFC33FF96A1D5BEEE778088E63ECA0DB615F47BAD69549E2F87D7183064E
EB6E64F88A2C841B15E4D1E27316D21F0265684F6579E15B8A57B4EA331C2BFA
AC8E8DDACC6CDB74E938D44472C1F01846379991755A953C6F048A904F3C80E9
BF25B892B3AD2731EFD12F9175CD95849C451A955C4643432A1AEDF942B266EA
BADDC7CAF9F9D3E2FB4251593544A5DB249BD4F2CCCEF192C6478D21A3BB6C78
8EC4DC53592A8D06A25135505CE7F015EBB2988CF47B1F93C63855ECB4E6ABCB
6E143855B49BA91CDD5B32B1105E1AF47580F1FE56621D4354EDD8ACB9D78025
1B578D445ED1CBD094648C270255A552AE8B794088D915C8341AB9CCC73AF623
155ABCCEB70FD4C7F2CF2F6786A5BF5209A1B1351DD0C485A7208F48F126E83D
2A681C976E4EF52D7664D0FE5701E3A50C8CEA88B477E4B9C5F340BC4B3779EA
160DA5D3679DAD1546B6483C90A2157B0FF3BF23A13C2B1BA8A5C7C3BA938924
82E177255E017F7C4726AD36814AEB40D68457BC8DA802187D231E607BD61245
9F764A24631BEFF0460EA7E6CBE52FAFE31266C205989E1C18B8D70D47C4C886
15EF5056C32672B2854CAB4D7DB6EC7887E73EB21E75A086FFDFDABEC69C1732
CC1CDFCA29D71F290CEEFF950653B4EA020FE2A05CE08FBEF16A5304D797DE51
FAD2312327128A3208044290167D189D98296BC1E51B4A8D004B81DE2F37630F
26D60931C7108822C32CD9A82C23CD256B08D1B064B200FCDF50D3DFA0E09A2B
3937877D50C6FCAADBB9EE69B518B6A607E84862114732B0128C9ECAB23714FE
B649DCB4C0B71FD9CFDF5D76AE53E769D2AF0B105EEE2746070807B6379AF51A
EB838601709849377AD9F8EBAA58D1747C0619E0E997B0146F2325498B34F3E3
0DE0583CD7786E290974F9FA28529583643F0FEB606BADD5929E1A645DDD68F3
6EFAD456D0F2C6F1579F23598BF3586AF19D858BBC5B96912E91FA3F45FE7E44
E270CD3E5997357FC915ABFA96DF8449854F6EC6DD6FE07F0F9AC2BBCF37F576
49E7FAFF34F004150DFF001714F923777AFF1DB73E6F55302FD7C1ED05C823C8
B8881D408DEEA8AE77B82943691444A1888E25876ABD2ED75954AA15062E2E63
2212174E032910B8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 2074 600 600 (HA-prospser-exemplo.dvi)
@start /Fa 138[95 6[92 110[{}2 120.531 /Dingbats rf /Fb
137[60 67 34 60 40 1[67 1[67 1[27 2[27 67 2[67 67 60
1[67 1[67 12[87 12[80 1[87 8[34 10[34 34 46[{
 TeXBase1Encoding ReEncodeFont }21 120.531 /NimbusSanL-Regu
rf /Fc 138[96 48 86 57 1[96 96 96 143 38 86 1[38 96 96
48 96 96 86 96 96 9[163 2[105 11[124 6[115 5[48 48 11[48
57 45[{ TeXBase1Encoding ReEncodeFont }27 172.188 /NimbusSanL-Regu
rf /Fd 136[214 1[168 92 153 107 1[168 168 3[153 1[77
168 168 92 153 1[153 1[153 31[199 65[{ TeXBase1Encoding ReEncodeFont }
16 275.5 /NimbusSanL-BoldItal rf /Fe 138[151 83 138 96
1[151 151 151 220 69 138 1[69 151 151 1[138 151 138 1[138
9[234 13[69 179 6[179 19[83 45[{ TeXBase1Encoding ReEncodeFont }22
247.95 /NimbusSanL-Bold rf /Ff 138[38 19 34 23 1[38 38
38 57 15 34 1[15 38 38 1[38 38 34 38 38 9[65 3[46 9[19
50 6[46 10[38 2[38 38 38 38 1[19 23 19 44[{
 TeXBase1Encoding ReEncodeFont }31 68.8751 /NimbusSanL-Regu
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -600 -600 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref and HA-prosper packages)/Author ()/Keywords ()
/DOCINFO pdfmark end
 -600 -600 a -600 -600
a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600 -600 a -1211 -1817 a
SDict begin H.S end
 -1211 -1817 a -1211 -1817
a
SDict begin H.R end
 -1211 -1817 a -1211 -1817 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600
a
SDict begin [ {ThisPage}<</Trans << /S /Wipe >> >> /PUT pdfmark end
 -600 -600 a -600 6000 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 6000 a -600 6000 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600
6000 a -600 6000 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600 6000 a -600 6000 a
SDict begin [ /Count 1 /Page 2 /View [/XYZ null null null] /Title (Introduction)
/OUT pdfmark end
 -600 6000
a -600 6000 a
SDict begin [ /Count -1 /Page 3 /View [/XYZ null null null] /Title
(Welcome) /OUT pdfmark end
 -600 6000 a -600 6000 a
SDict begin [ /Count 0 /Page 4 /View [/XYZ null null null] /Title (Welcome)
/OUT pdfmark end
 -600 6000 a -600
6000 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -600 6000 a -600 6000 a
SDict begin [/CropBox [0 0 595 840] /PAGES pdfmark end
 -600 6000 a -600 6000
a
SDict begin [ {Catalog}<</ViewerPreferences<</FitWindow true/CenterWindow
true>>>> /PUT pdfmark end
 -600 6000 a -600 6000 a
SDict begin H.S end
 -600 6000 a -600 6000 a
SDict begin 12 H.A end
 -600
6000 a -600 6000 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -600 6000 a -600 6000 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(1)>>1<</P(2)>>2<</P(3)>>3<</P(3)>>]>>>>
/PUT pdfmark end
 -600 6000
a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500 6000 a 5001 5222 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -59.75093 -37.55782 355.65929 218.80167
.5 Frame  gsave 0.87 0.85 0.70 setrgbcolor  1. .setopacityalpha  fill
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -59.75093 -37.55782 355.65929 -17.07181
.5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.20 0.45 0.57 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 355.65929 -17.07181 -65.44139 -17.07181   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0.20 0.45 0.57 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.20 0.45 0.57 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 355.65929 218.80167 -65.44139 218.80167   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0.20 0.45 0.57 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
5001 5222 a
tx@Dict begin { -46.94684 -25.60728 } PutCoor PutBegin  end
 5001 5222 a 5001 5222 a
0. 0.32 0.46 setrgbcolor
 5001 5222 a 5001
5222 a
1. setgray
 5001 5222 a 5001 5273 a
SDict begin H.S end
 5001 5273 a -1 x Ff(Hendr)q(i)20
b(Adr)q(iaens)5497 5223 y
SDict begin H.R end
 5497 5223 a 5497 5272 a
SDict begin [/H /I/Border [0 0 1]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://center.uvt.nl/phd_stud/adriaens)>>/Subtype
/Link H.B /ANN pdfmark end
 5497
5272 a Ff(,)f(September)i(20,)f(2016)6158 5272 y
0 setgray
 6158
5272 a 6158 5272 a
0 setgray
 6158 5272 a 5001 5222 a
tx@Dict begin  PutEnd  end
 5001 5222
a 5001 5222 a
tx@Dict begin { 322.93881 -25.60728 } PutCoor PutBegin  end
 5001 5222 a 3626 5271 a
0. 0.32 0.46 setrgbcolor
 3626 5271 a 3626
5271 a
1. setgray
 3626 5271 a Ff(Introduction)i(to)e(the)g(HA-prosper)g(pac)o
(kage)h(-)e(p)n(.)h(1)5001 5271 y
0 setgray
 5001 5271 a 5001 5271
a
0 setgray
 5001 5271 a 5001 5222 a
tx@Dict begin  PutEnd  end
 5001 5222 a 5001 3450 a
tx@Dict begin { 132.87425 79.66776 } PutCoor PutBegin  end
 5001
3450 a 2306 4519 a
0 setgray
 2306 4519 a 2306 3450 a
0. 0.32 0.46 setrgbcolor
 2306 3450
a 2306 3622 a
0. 0.32 0.46 setrgbcolor
 2306 3622 a 2666 3893 a Fe(Intr)-5 b(oduction)72
b(to)d(the)f(HA-pr)-5 b(osper)71 b(pac)-5 b(ka)n(g)r(e)2306
3948 y
0. 0.32 0.46 setrgbcolor
 2306 3948 a 2306 3948 a
0. 0.32 0.46 setrgbcolor
 2306 3948 a 2958 4308
a Fd(A)76 b(pac)-6 b(ka)m(g)s(e)79 b(f)-6 b(or)77 b(use)g(with)g(pr)-6
b(osper)2306 4369 y
0. 0.32 0.46 setrgbcolor
 2306 4369 a 2306 4652 a
0. 0.32 0.46 setrgbcolor
 2306 4652
a 4381 4940 a Fc(Hendr)s(i)48 b(Adr)s(iaens)4790 5184
y
0. 0.32 0.46 setrgbcolor
 4790 5184 a Fb(CentER)5212 5184 y
0. 0.32 0.46 setrgbcolor
 5212 5184 a 4011
5428 a
0. 0.32 0.46 setrgbcolor
 4011 5428 a 4011 5453 a
SDict begin H.S end
 4011 5453 a -25 x Fb(http://center)-6
b(.uvt.nl/phd_stud/adr)r(iaens)5990 5339 y
SDict begin H.R end
 5990 5339
a 5990 5428 a
SDict begin [/H /I/Border [0 0 1]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://center.uvt.nl/phd_stud/adriaens)>>/Subtype
/Link H.B /ANN pdfmark end
 5990 5428 a 5990 5428 a
0. 0.32 0.46 setrgbcolor
 5990 5428 a 2306
5501 a
0. 0.32 0.46 setrgbcolor
 2306 5501 a 5001 3450 a
tx@Dict begin  PutEnd  end
 5001 3450 a 4500 6000
a
tx@Dict begin -90 Rot  end
 4500 6000 a eop end
%%Page: 2 2
TeXDict begin 2 1 bop -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600 -600 a -1211 -1817
a
SDict begin H.S end
 -1211 -1817 a -1211 -1817 a
SDict begin H.R end
 -1211 -1817 a -1211 -1817
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /Wipe >> >> /PUT pdfmark end
 -600 -600 a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500
6000 a 5001 5222 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -59.75093 -37.55782 355.65929 253.22923
.5 Frame  gsave 0.87 0.85 0.70 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -59.75093 -37.55782 355.65929 -17.07181
.5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.20 0.45 0.57 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 355.65929 -17.07181 -65.44139 -17.07181   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0.20 0.45 0.57 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -65.44139 219.65521 15.27919 -17.07181
.5 Frame  gsave 0.20 0.45 0.57 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -65.44139 253.22923 355.65929 218.65926
.5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.20 0.45 0.57 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 355.65929 218.80167 -65.44139 218.80167   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0.20 0.45 0.57 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0. 0.32 0.46 setrgbcolor   0 360 36.98865 19.91682 .5 CLW
mul dup 4 -1 roll sub neg 3 1 roll sub -19.91682 233.31241  0 true
Ellipse  closepath  gsave 0. 0.32 0.46 setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0.20 0.45 0.57 setrgbcolor   0 360 36.98865 19.91682 .5 CLW
mul dup 4 -1 roll sub neg 3 1 roll sub -19.91682 233.31241  0 true
Ellipse  closepath  gsave 0.8 SLW 0.20 0.45 0.57 setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5001 5222 a
tx@Dict begin { -46.94684 194.90146 } PutCoor PutBegin  end
 5001
5222 a 5001 5222 a
0. 0.32 0.46 setrgbcolor
 5001 5222 a 5001 5222 a
1. setgray
 5001 5222
a 49 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.25 SLW 0.68 0.64 0.11 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 56.90549 -1.42271 -1.42271 -1.42271   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.25 SLW 0.68 0.64 0.11 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 5001 5272
a
SDict begin H.S end
 5001 5272 a -1 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.68 0.64 0.11 setrgbcolor  0. true 1.42271 neg 1.46867 neg
58.32822 4.27269 .5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
5001 5222 a
0. 0.32 0.46 setrgbcolor
 5001 5222 a 5609 5271 a Ff(Introduction)5981
5271 y
1. setgray
 5981 5271 a 5981 5222 a
SDict begin H.R end
 5981 5222 a 5981 5271
a
SDict begin [ /Page 2 /Border [0 0 0] /View [/XYZ null null null] H.B
/LNK pdfmark end
 5981 5271 a 5001 5384 a
SDict begin H.S end
 5001 5384 a 683 w Ff(W)n(elcome)5981
5334 y
SDict begin H.R end
 5981 5334 a 5981 5381 a
SDict begin [ /Page 3 /Border [0 0 0] /View [/XYZ null null null] H.B
/LNK pdfmark end
 5981 5381 a 5001 5384
a
0 setgray
 5001 5384 a 5001 5384 a
0 setgray
 5001 5384 a 5001 5222 a
tx@Dict begin  PutEnd  end
 5001
5222 a 5001 5222 a
tx@Dict begin { -46.94684 -25.60728 } PutCoor PutBegin  end
 5001 5222 a 5001 5222 a
0. 0.32 0.46 setrgbcolor
 5001 5222
a 5001 5222 a
1. setgray
 5001 5222 a 5001 5273 a
SDict begin H.S end
 5001 5273 a -1
x Ff(Hendr)q(i)20 b(Adr)q(iaens)5497 5223 y
SDict begin H.R end
 5497 5223
a 5497 5272 a
SDict begin [/H /I/Border [0 0 1]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://center.uvt.nl/phd_stud/adriaens)>>/Subtype
/Link H.B /ANN pdfmark end
 5497 5272 a Ff(,)f(September)i(20,)f(2016)6158
5272 y
0 setgray
 6158 5272 a 6158 5272 a
0 setgray
 6158 5272 a 5001 5222
a
tx@Dict begin  PutEnd  end
 5001 5222 a 5001 5222 a
tx@Dict begin { 322.93881 -25.60728 } PutCoor PutBegin  end
 5001 5222 a 3626 5271 a
0. 0.32 0.46 setrgbcolor
 3626
5271 a 3626 5271 a
1. setgray
 3626 5271 a Ff(Introduction)i(to)e(the)g(HA-prosper)
g(pac)o(kage)h(-)e(p)n(.)h(2)5001 5271 y
0 setgray
 5001 5271 a
5001 5271 a
0 setgray
 5001 5271 a 5001 5222 a
tx@Dict begin  PutEnd  end
 5001 5222 a 5001
3450 a
tx@Dict begin { 21.90872 93.89413 } PutCoor PutBegin  end
 5001 3450 a 5001 3952 a
0 setgray
 5001 3952 a 5001 3450
a
0. 0.32 0.46 setrgbcolor
 5001 3450 a 5001 4185 a
0. 0.32 0.46 setrgbcolor
 5001 4185 a 6676 4366 a Fe(Intr)-5
b(oduction)8115 4366 y
0. 0.32 0.46 setrgbcolor
 8115 4366 a 5001 3450 a
tx@Dict begin  PutEnd  end
 5001 3450
a 4500 6000 a
tx@Dict begin -90 Rot  end
 4500 6000 a eop end
%%Page: 3 3
TeXDict begin 3 2 bop -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600 -600 a -1211 -1817
a
SDict begin H.S end
 -1211 -1817 a -1211 -1817 a
SDict begin H.R end
 -1211 -1817 a -1211 -1817
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /Wipe >> >> /PUT pdfmark end
 -600 -600 a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500
6000 a 5001 5222 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -59.75093 -37.55782 355.65929 253.22923
.5 Frame  gsave 0.87 0.85 0.70 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -59.75093 -37.55782 355.65929 -17.07181
.5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.20 0.45 0.57 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 355.65929 -17.07181 -65.44139 -17.07181   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0.20 0.45 0.57 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -65.44139 219.65521 15.27919 -17.07181
.5 Frame  gsave 0.20 0.45 0.57 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -65.44139 253.22923 355.65929 218.65926
.5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.20 0.45 0.57 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 355.65929 218.80167 -65.44139 218.80167   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0.20 0.45 0.57 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0. 0.32 0.46 setrgbcolor   0 360 36.98865 19.91682 .5 CLW
mul dup 4 -1 roll sub neg 3 1 roll sub -19.91682 233.31241  0 true
Ellipse  closepath  gsave 0. 0.32 0.46 setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0.20 0.45 0.57 setrgbcolor   0 360 36.98865 19.91682 .5 CLW
mul dup 4 -1 roll sub neg 3 1 roll sub -19.91682 233.31241  0 true
Ellipse  closepath  gsave 0.8 SLW 0.20 0.45 0.57 setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5001 5222 a
tx@Dict begin { -46.94684 194.90146 } PutCoor PutBegin  end
 5001
5222 a 5001 5222 a
0. 0.32 0.46 setrgbcolor
 5001 5222 a 5001 5222 a
1. setgray
 5001 5222
a 49 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.25 SLW 0.68 0.64 0.11 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 56.90549 -1.42271 -1.42271 -1.42271   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.25 SLW 0.68 0.64 0.11 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 5001 5272
a
SDict begin H.S end
 5001 5272 a 5609 5271 a Ff(Introduction)5981 5222 y
SDict begin H.R end

5981 5222 a 5981 5271 a
SDict begin [ /Page 2 /Border [0 0 0] /View [/XYZ null null null] H.B
/LNK pdfmark end
 5981 5271 a 5001 5384 a
SDict begin H.S end
 5001
5384 a -3 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.68 0.64 0.11 setrgbcolor  0. true 1.42271 neg 1.62068 neg
58.32822 4.12068 .5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial 5001
5334 a
0. 0.32 0.46 setrgbcolor
 5001 5334 a 5684 5384 a Ff(W)n(elcome)5981 5381
y
1. setgray
 5981 5381 a 5981 5334 a
SDict begin H.R end
 5981 5334 a 5981 5381 a
SDict begin [ /Page 3 /Border [0 0 0] /View [/XYZ null null null] H.B
/LNK pdfmark end
 5981
5381 a 5001 5384 a
0 setgray
 5001 5384 a 5001 5384 a
0 setgray
 5001 5384
a 5001 5222 a
tx@Dict begin  PutEnd  end
 5001 5222 a 5001 5222 a
tx@Dict begin { -46.94684 -25.60728 } PutCoor PutBegin  end
 5001 5222 a 5001
5222 a
0. 0.32 0.46 setrgbcolor
 5001 5222 a 5001 5222 a
1. setgray
 5001 5222 a 5001 5273
a
SDict begin H.S end
 5001 5273 a -1 x Ff(Hendr)q(i)20 b(Adr)q(iaens)5497
5223 y
SDict begin H.R end
 5497 5223 a 5497 5272 a
SDict begin [/H /I/Border [0 0 1]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://center.uvt.nl/phd_stud/adriaens)>>/Subtype
/Link H.B /ANN pdfmark end
 5497 5272 a Ff(,)f(September)i(20,)f
(2016)6158 5272 y
0 setgray
 6158 5272 a 6158 5272 a
0 setgray
 6158 5272 a
5001 5222 a
tx@Dict begin  PutEnd  end
 5001 5222 a 5001 5222 a
tx@Dict begin { 322.93881 -25.60728 } PutCoor PutBegin  end
 5001 5222 a 3626
5271 a
0. 0.32 0.46 setrgbcolor
 3626 5271 a 3626 5271 a
1. setgray
 3626 5271 a Ff(Introduction)i(to)e(the)g
(HA-prosper)g(pac)o(kage)h(-)e(p)n(.)h(3)5001 5271 y
0 setgray

5001 5271 a 5001 5271 a
0 setgray
 5001 5271 a 5001 5222 a
tx@Dict begin  PutEnd  end
 5001
5222 a 5001 5222 a
tx@Dict begin   tx@ovlDict begin InitOL end /TheOL 0 def  end
 5001 5222 a 5001 5222 a
tx@Dict begin 0  tx@ovlDict begin BOL end  end
 5001 5222
a 5001 3450 a
tx@Dict begin { -48.36957 126.61461 } PutCoor PutBegin  end
 5001 3450 a 5001 3450 a
0. 0.32 0.46 setrgbcolor
 5001 3450 a 5001
3450 a
1. setgray
 5001 3450 a Fe(W)-9 b(elcome)6080 3450 y
0 setgray
 6080
3450 a 6080 3450 a
0 setgray
 6080 3450 a 5001 3450 a
tx@Dict begin  PutEnd  end
 5001 3450
a 5001 3450 a
tx@Dict begin { 21.90872 93.89413 } PutCoor PutBegin  end
 5001 3450 a 5001 4106 a
0 setgray
 5001 4106 a 5001
3450 a
0. 0.32 0.46 setrgbcolor
 5001 3450 a 5001 3450 a
SDict begin H.S end
 5001 3450 a 5001 3450
a
SDict begin 11.79993 H.A end
 5001 3450 a 5001 3450 a
SDict begin [/View [/XYZ H.V]/Dest (overlay.1) cvn /DEST pdfmark end
 5001 3450 a 5001 3450 a
tx@Dict begin  1  tx@ovlDict begin BOL end  end
 5001
3450 a 5001 3450 a
tx@Dict begin 0  tx@ovlDict begin BOL end  end
 5001 3450 a 109 x Fa(n)5163 3577 y
Fc(W)k(elcome)47 b(to)h(the)f(introduction)g(of)g(the)h(HA-prosper)g
(pac)m(kage)m(.)5001 3808 y Fa(n)5163 3825 y Fc(The)g(main)g(f)-5
b(eatures)46 b(of)i(HA-prosper)g(are:)5195 4011 y Fa(u)5361
4028 y Fc(tab)m(le)f(of)g(contents;)5195 4214 y Fa(u)5361
4231 y Fc(por)7 b(tr)n(ait)48 b(slides)g(suppor)7 b(t;)5195
4417 y Fa(u)5361 4434 y Fc(notes;)5195 4620 y Fa(u)5361
4637 y Fc(prosper)47 b(b)m(ug)g(solutions)m(.)5001 3450
y
tx@Dict begin  PutEnd  end
 5001 3450 a 10245 5222 a
tx@Dict begin -1  tx@ovlDict begin BOL end  end
 10245 5222 a 4500 6000 a
tx@Dict begin -90 Rot  end
 4500
6000 a eop end
%%Page: 3 4
TeXDict begin 3 3 bop -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600 -600 a -1211 -1817
a
SDict begin H.S end
 -1211 -1817 a -1211 -1817 a
SDict begin H.R end
 -1211 -1817 a -1211 -1817
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /Wipe >> >> /PUT pdfmark end
 -600 -600 a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500
6000 a 5001 5222 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -59.75093 -37.55782 355.65929 253.22923
.5 Frame  gsave 0.87 0.85 0.70 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -59.75093 -37.55782 355.65929 -17.07181
.5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.20 0.45 0.57 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 355.65929 -17.07181 -65.44139 -17.07181   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0.20 0.45 0.57 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -65.44139 219.65521 15.27919 -17.07181
.5 Frame  gsave 0.20 0.45 0.57 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0. setgray   0. true -65.44139 253.22923 355.65929 218.65926
.5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.20 0.45 0.57 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 355.65929 218.80167 -65.44139 218.80167   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0.20 0.45 0.57 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0. 0.32 0.46 setrgbcolor   0 360 36.98865 19.91682 .5 CLW
mul dup 4 -1 roll sub neg 3 1 roll sub -19.91682 233.31241  0 true
Ellipse  closepath  gsave 0. 0.32 0.46 setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0.20 0.45 0.57 setrgbcolor   0 360 36.98865 19.91682 .5 CLW
mul dup 4 -1 roll sub neg 3 1 roll sub -19.91682 233.31241  0 true
Ellipse  closepath  gsave 0.8 SLW 0.20 0.45 0.57 setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5001 5222 a
tx@Dict begin { -46.94684 194.90146 } PutCoor PutBegin  end
 5001
5222 a 5001 5222 a
0. 0.32 0.46 setrgbcolor
 5001 5222 a 5001 5222 a
1. setgray
 5001 5222
a 49 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.25 SLW 0.68 0.64 0.11 setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 56.90549 -1.42271 -1.42271 -1.42271   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.25 SLW 0.68 0.64 0.11 setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 5001 5272
a
SDict begin H.S end
 5001 5272 a 5609 5271 a Ff(Introduction)5981 5222 y
SDict begin H.R end

5981 5222 a 5981 5271 a
SDict begin [ /Page 2 /Border [0 0 0] /View [/XYZ null null null] H.B
/LNK pdfmark end
 5981 5271 a 5001 5384 a
SDict begin H.S end
 5001
5384 a -3 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.68 0.64 0.11 setrgbcolor  0. true 1.42271 neg 1.62068 neg
58.32822 4.12068 .5 Frame  gsave 0.68 0.64 0.11 setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial 5001
5334 a
0. 0.32 0.46 setrgbcolor
 5001 5334 a 5684 5384 a Ff(W)n(elcome)5981 5381
y
1. setgray
 5981 5381 a 5981 5334 a
SDict begin H.R end
 5981 5334 a 5981 5381 a
SDict begin [ /Page 3 /Border [0 0 0] /View [/XYZ null null null] H.B
/LNK pdfmark end
 5981
5381 a 5001 5384 a
0 setgray
 5001 5384 a 5001 5384 a
0 setgray
 5001 5384
a 5001 5222 a
tx@Dict begin  PutEnd  end
 5001 5222 a 5001 5222 a
tx@Dict begin { -46.94684 -25.60728 } PutCoor PutBegin  end
 5001 5222 a 5001
5222 a
0. 0.32 0.46 setrgbcolor
 5001 5222 a 5001 5222 a
1. setgray
 5001 5222 a 5001 5273
a
SDict begin H.S end
 5001 5273 a -1 x Ff(Hendr)q(i)20 b(Adr)q(iaens)5497
5223 y
SDict begin H.R end
 5497 5223 a 5497 5272 a
SDict begin [/H /I/Border [0 0 1]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://center.uvt.nl/phd_stud/adriaens)>>/Subtype
/Link H.B /ANN pdfmark end
 5497 5272 a Ff(,)f(September)i(20,)f
(2016)6158 5272 y
0 setgray
 6158 5272 a 6158 5272 a
0 setgray
 6158 5272 a
5001 5222 a
tx@Dict begin  PutEnd  end
 5001 5222 a 5001 5222 a
tx@Dict begin { 322.93881 -25.60728 } PutCoor PutBegin  end
 5001 5222 a 3626
5271 a
0. 0.32 0.46 setrgbcolor
 3626 5271 a 3626 5271 a
1. setgray
 3626 5271 a Ff(Introduction)i(to)e(the)g
(HA-prosper)g(pac)o(kage)h(-)e(p)n(.)h(3)5001 5271 y
0 setgray

5001 5271 a 5001 5271 a
0 setgray
 5001 5271 a 5001 5222 a
tx@Dict begin  PutEnd  end
 5001
5222 a 5001 5222 a
tx@Dict begin   tx@ovlDict begin InitOL end /TheOL 0 def  end
 5001 5222 a 5001 5222 a
tx@Dict begin 0  tx@ovlDict begin BOL end  end
 5001 5222
a 5001 3450 a
tx@Dict begin { -48.36957 126.61461 } PutCoor PutBegin  end
 5001 3450 a 5001 3450 a
0. 0.32 0.46 setrgbcolor
 5001 3450 a 5001
3450 a
1. setgray
 5001 3450 a Fe(W)-9 b(elcome)6080 3450 y
0 setgray
 6080
3450 a 6080 3450 a
0 setgray
 6080 3450 a 5001 3450 a
tx@Dict begin  PutEnd  end
 5001 3450
a 5001 3450 a
tx@Dict begin { 21.90872 93.89413 } PutCoor PutBegin  end
 5001 3450 a 5001 4106 a
0 setgray
 5001 4106 a 5001
3450 a
0. 0.32 0.46 setrgbcolor
 5001 3450 a 5001 3450 a
SDict begin H.S end
 5001 3450 a 5001 3450
a
SDict begin 11.79993 H.A end
 5001 3450 a 5001 3450 a
SDict begin [/View [/XYZ H.V]/Dest (overlay.1) cvn /DEST pdfmark end
 5001 3450 a 5001 3450 a
tx@Dict begin  1  tx@ovlDict begin BOL end  end
 5001
3450 a 5001 3450 a
tx@Dict begin 0  tx@ovlDict begin BOL end  end
 5001 3450 a 109 x Fa(n)5163 3577 y
Fc(W)k(elcome)47 b(to)h(the)f(introduction)g(of)g(the)h(HA-prosper)g
(pac)m(kage)m(.)5001 3808 y Fa(n)5163 3825 y Fc(The)g(main)g(f)-5
b(eatures)46 b(of)i(HA-prosper)g(are:)5195 4011 y Fa(u)5361
4028 y Fc(tab)m(le)f(of)g(contents;)5195 4214 y Fa(u)5361
4231 y Fc(por)7 b(tr)n(ait)48 b(slides)g(suppor)7 b(t;)5195
4417 y Fa(u)5361 4434 y Fc(notes;)5195 4620 y Fa(u)5361
4637 y Fc(prosper)47 b(b)m(ug)g(solutions)m(.)5001 3450
y
tx@Dict begin  PutEnd  end
 5001 3450 a 10245 5222 a
tx@Dict begin -1  tx@ovlDict begin BOL end  end
 10245 5222 a 4500 6000 a
tx@Dict begin -90 Rot  end
 4500
6000 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
